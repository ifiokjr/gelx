---
source: crates/gelx/tests/codegen.rs
expression: "&content"
---
pub mod example {
    use ::gelx::exports as e;
    /// Execute the desired query.
    #[cfg(feature = "query")]
    pub async fn query(
        client: &e::gel_tokio::Client,
        props: &Input,
    ) -> core::result::Result<Option<Output>, e::gel_errors::Error> {
        client.query_single(QUERY, props).await
    }
    /// Compose the query as part of a larger transaction.
    #[cfg(feature = "query")]
    pub async fn transaction(
        conn: &mut e::gel_tokio::Transaction,
        props: &Input,
    ) -> core::result::Result<Option<Output>, e::gel_errors::Error> {
        conn.query_single(QUERY, props).await
    }
    #[derive(
        Clone,
        Debug,
        e::serde::Serialize,
        e::serde::Deserialize,
        e::typed_builder::TypedBuilder,
        e::gel_derive::Queryable
    )]
    pub struct Input {
        #[builder(setter(into))]
        pub id: e::uuid::Uuid,
    }
    impl e::gel_protocol::query_arg::QueryArgs for Input {
        fn encode(
            &self,
            encoder: &mut e::gel_protocol::query_arg::Encoder,
        ) -> core::result::Result<(), e::gel_errors::Error> {
            let map = e::gel_protocol::named_args! {
                "id" => self.id.clone(),
            };
            map.encode(encoder)
        }
    }
    #[derive(
        Clone,
        Debug,
        e::serde::Serialize,
        e::serde::Deserialize,
        e::gel_derive::Queryable
    )]
    pub struct Output {
        pub id: e::uuid::Uuid,
    }
    /// The original query string provided to the macro. Can be reused in your codebase.
    pub const QUERY: &str = "delete User filter .id = <uuid>$id;\n";
}
